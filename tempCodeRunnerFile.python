import sys
import os
from PyQt5.QtWidgets import QApplication, QDialog, QMessageBox, QListView, QLineEdit
from PyQt5.QtCore import QDate, QStringListModel
from loginPage import *
from actionTab import *
from appointmentTab import *
from ActiveAppointmentsTab import *

class appointment_Tab(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_appointmentTab()
        self.ui.setupUi(self)
        
        # connect back button
        self.ui.backButton.clicked.connect(self.back_to_actionTab)
        self.ui.confirmButtonApp.clicked.connect(self.book_appointment)
        self.ui.dateEdit.setDate(QDate.currentDate())

    def book_appointment(self):
        firstname = self.ui.fnameEdit.text()
        lastname = self.ui.sNameEdit.text()
        reason = self.ui.reasonComboBox.currentText()
        date = self.ui.dateEdit.date().toString("yyyy-MM-dd")

        if not firstname or not lastname:
            self.ui.bookingStatusLabel.setText("Warning: Please fill in all fields!")
            self.ui.bookingStatusLabel.setStyleSheet("Color: red")
            return

        with open("Appointment.txt", "a") as file:
            file.write(f"First Name: {firstname}\n")
            file.write(f"Last Name: {lastname}\n")
            file.write(f"Reason: {reason}\n")
            file.write(f"Date: {date}\n")
            file.write("-" * 75 + "\n")

        self.ui.bookingStatusLabel.setText("Status: Appointment Booked Successfully!")
        self.ui.bookingStatusLabel.setStyleSheet("Color: green")

        self.ui.fnameEdit.clear()
        self.ui.sNameEdit.clear()
        self.ui.reasonComboBox.setCurrentIndex(0)
        
    def back_to_actionTab(self):
        self.backAction = action_tab()
        self.backAction.show()
        self.close()

class active_appointment(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_activeAppointment()
        self.ui.setupUi(self)

        # Create model for QListView
        self.model = QStringListModel()
        self.ui.listView.setModel(self.model)

        self.ui.showButton.clicked.connect(self.show_data)
        self.ui.activeBackButton.clicked.connect(self.goToActionTab)

    def show_data(self):
        filename = "Appointment.txt"

        if not os.path.exists(filename):
            QMessageBox.warning(self, "File Not Found", f"'{filename}' does not exist.")
            return

        try:
            with open(filename, "r") as file:
                lines = [line.strip() for line in file if line.strip()]
                self.model.setStringList(lines)
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Failed to load file:\n{str(e)}")
    
    def goToActionTab(self):
        self.backAction = action_tab()
        self.backAction.show()
        self.close()

class action_tab(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_actionTab()
        self.ui.setupUi(self)

        # Connect button to switch dialog
        self.ui.bookButton.clicked.connect(self.switch_to_appointment)
        self.ui.checkButton.clicked.connect(self.switch_to_active)

    def switch_to_appointment(self):
        self.second = appointment_Tab()
        self.second.show()
        self.close()  # Close the first dialog

    def switch_to_active(self):
        self.active = active_appointment()
        self.active.show()
        self.close()

class login_tab(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_loginPage()
        self.ui.setupUi(self)

        # Connect button to switch dialog
        self.ui.loginButton.clicked.connect(self.switch_to_action)
        # Set password field to hide input
        self.ui.passwordEdit.setEchoMode(QLineEdit.Password)
    def switch_to_action(self):
        username = self.ui.usernameEdit.text()
        password = self.ui.passwordEdit.text()
        

        if username == "Balekane" and password == "Tladi":
            self.second = action_tab()
            self.second.show()
            self.close()  # Close the first dialog

        else:
            QMessageBox.warning(self, "Login", "Invalid username or password!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window1 = login_tab()
    window1.show()
    sys.exit(app.exec_())